{"version":3,"sources":["scripts.js"],"names":[],"mappings":"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","file":"scripts.js","sourcesContent":["$(document).ready(function()\r\n{\r\n\t// == NOTE ==\r\n\t// This code uses ES6 promises. If you want to use this code in a browser\r\n\t// that doesn't supporting promises natively, you'll have to include a polyfill.\r\n\r\n\tgapi.analytics.ready(function() {\r\n\r\n\t  /**\r\n\t   * Authorize the user immediately if the user has already granted access.\r\n\t   * If no access has been created, render an authorize button inside the\r\n\t   * element with the ID \"embed-api-auth-container\".\r\n\t   */\r\n\t  gapi.analytics.auth.authorize({\r\n\t    container: '#ga',\r\n\t    clientid: '34801062566-ia9g1buejdlphlnikn4u2krc1eg39121.apps.googleusercontent.com'\r\n\t  });\r\n\r\n\r\n\t  /**\r\n\t   * Create a new ActiveUsers instance to be rendered inside of an\r\n\t   * element with the id \"active-users-container\" and poll for changes every\r\n\t   * five seconds.\r\n\t   */\r\n\t  var activeUsers = new gapi.analytics.ext.ActiveUsers({\r\n\t    container: 'active-users-container',\r\n\t    pollingInterval: 5\r\n\t  });\r\n\r\n\r\n\t  /**\r\n\t   * Add CSS animation to visually show the when users come and go.\r\n\t   */\r\n\t  activeUsers.once('success', function() {\r\n\t    var element = this.container.firstChild;\r\n\t    var timeout;\r\n\r\n\t    this.on('change', function(data) {\r\n\t      var element = this.container.firstChild;\r\n\t      var animationClass = data.delta > 0 ? 'is-increasing' : 'is-decreasing';\r\n\t      element.className += (' ' + animationClass);\r\n\r\n\t      clearTimeout(timeout);\r\n\t      timeout = setTimeout(function() {\r\n\t        element.className =\r\n\t            element.className.replace(/ is-(increasing|decreasing)/g, '');\r\n\t      }, 3000);\r\n\t    });\r\n\t  });\r\n\r\n\r\n\t  /**\r\n\t   * Create a new ViewSelector2 instance to be rendered inside of an\r\n\t   * element with the id \"view-selector-container\".\r\n\t   */\r\n\t  var viewSelector = new gapi.analytics.ext.ViewSelector2({\r\n\t    container: 'view-selector-container',\r\n\t  })\r\n\t  .execute();\r\n\r\n\r\n\t  /**\r\n\t   * Update the activeUsers component, the Chartjs charts, and the dashboard\r\n\t   * title whenever the user changes the view.\r\n\t   */\r\n\t  viewSelector.on('viewChange', function(data) {\r\n\t    var title = document.getElementById('view-name');\r\n\t    title.innerHTML = data.property.name + ' (' + data.view.name + ')';\r\n\r\n\t    // Start tracking active users for this view.\r\n\t    activeUsers.set(data).execute();\r\n\r\n\t    // Render all the of charts for this view.\r\n\t    renderWeekOverWeekChart(data.ids);\r\n\t    renderYearOverYearChart(data.ids);\r\n\t    renderTopBrowsersChart(data.ids);\r\n\t    renderTopCountriesChart(data.ids);\r\n\t  });\r\n\r\n\r\n\t  /**\r\n\t   * Draw the a chart.js line chart with data from the specified view that\r\n\t   * overlays session data for the current week over session data for the\r\n\t   * previous week.\r\n\t   */\r\n\t  function renderWeekOverWeekChart(ids) {\r\n\r\n\t    // Adjust `now` to experiment with different days, for testing only...\r\n\t    var now = moment(); // .subtract(3, 'day');\r\n\r\n\t    var thisWeek = query({\r\n\t      'ids': ids,\r\n\t      'dimensions': 'ga:date,ga:nthDay',\r\n\t      'metrics': 'ga:sessions',\r\n\t      'start-date': moment(now).subtract(1, 'day').day(0).format('YYYY-MM-DD'),\r\n\t      'end-date': moment(now).format('YYYY-MM-DD')\r\n\t    });\r\n\r\n\t    var lastWeek = query({\r\n\t      'ids': ids,\r\n\t      'dimensions': 'ga:date,ga:nthDay',\r\n\t      'metrics': 'ga:sessions',\r\n\t      'start-date': moment(now).subtract(1, 'day').day(0).subtract(1, 'week')\r\n\t          .format('YYYY-MM-DD'),\r\n\t      'end-date': moment(now).subtract(1, 'day').day(6).subtract(1, 'week')\r\n\t          .format('YYYY-MM-DD')\r\n\t    });\r\n\r\n\t    Promise.all([thisWeek, lastWeek]).then(function(results) {\r\n\r\n\t      var data1 = results[0].rows.map(function(row) { return +row[2]; });\r\n\t      var data2 = results[1].rows.map(function(row) { return +row[2]; });\r\n\t      var labels = results[1].rows.map(function(row) { return +row[0]; });\r\n\r\n\t      labels = labels.map(function(label) {\r\n\t        return moment(label, 'YYYYMMDD').format('ddd');\r\n\t      });\r\n\r\n\t      var data = {\r\n\t        labels : labels,\r\n\t        datasets : [\r\n\t          {\r\n\t            label: 'Last Week',\r\n\t            fillColor : 'rgba(220,220,220,0.5)',\r\n\t            strokeColor : 'rgba(220,220,220,1)',\r\n\t            pointColor : 'rgba(220,220,220,1)',\r\n\t            pointStrokeColor : '#fff',\r\n\t            data : data2\r\n\t          },\r\n\t          {\r\n\t            label: 'This Week',\r\n\t            fillColor : 'rgba(151,187,205,0.5)',\r\n\t            strokeColor : 'rgba(151,187,205,1)',\r\n\t            pointColor : 'rgba(151,187,205,1)',\r\n\t            pointStrokeColor : '#fff',\r\n\t            data : data1\r\n\t          }\r\n\t        ]\r\n\t      };\r\n\r\n\t      new Chart(makeCanvas('chart-1-container')).Line(data);\r\n\t      generateLegend('legend-1-container', data.datasets);\r\n\t    });\r\n\t  }\r\n\r\n\r\n\t  /**\r\n\t   * Draw the a chart.js bar chart with data from the specified view that\r\n\t   * overlays session data for the current year over session data for the\r\n\t   * previous year, grouped by month.\r\n\t   */\r\n\t  function renderYearOverYearChart(ids) {\r\n\r\n\t    // Adjust `now` to experiment with different days, for testing only...\r\n\t    var now = moment(); // .subtract(3, 'day');\r\n\r\n\t    var thisYear = query({\r\n\t      'ids': ids,\r\n\t      'dimensions': 'ga:month,ga:nthMonth',\r\n\t      'metrics': 'ga:users',\r\n\t      'start-date': moment(now).date(1).month(0).format('YYYY-MM-DD'),\r\n\t      'end-date': moment(now).format('YYYY-MM-DD')\r\n\t    });\r\n\r\n\t    var lastYear = query({\r\n\t      'ids': ids,\r\n\t      'dimensions': 'ga:month,ga:nthMonth',\r\n\t      'metrics': 'ga:users',\r\n\t      'start-date': moment(now).subtract(1, 'year').date(1).month(0)\r\n\t          .format('YYYY-MM-DD'),\r\n\t      'end-date': moment(now).date(1).month(0).subtract(1, 'day')\r\n\t          .format('YYYY-MM-DD')\r\n\t    });\r\n\r\n\t    Promise.all([thisYear, lastYear]).then(function(results) {\r\n\t      var data1 = results[0].rows.map(function(row) { return +row[2]; });\r\n\t      var data2 = results[1].rows.map(function(row) { return +row[2]; });\r\n\t      var labels = ['Jan','Feb','Mar','Apr','May','Jun',\r\n\t                    'Jul','Aug','Sep','Oct','Nov','Dec'];\r\n\r\n\t      // Ensure the data arrays are at least as long as the labels array.\r\n\t      // Chart.js bar charts don't (yet) accept sparse datasets.\r\n\t      for (var i = 0, len = labels.length; i < len; i++) {\r\n\t        if (data1[i] === undefined) data1[i] = null;\r\n\t        if (data2[i] === undefined) data2[i] = null;\r\n\t      }\r\n\r\n\t      var data = {\r\n\t        labels : labels,\r\n\t        datasets : [\r\n\t          {\r\n\t            label: 'Last Year',\r\n\t            fillColor : 'rgba(220,220,220,0.5)',\r\n\t            strokeColor : 'rgba(220,220,220,1)',\r\n\t            data : data2\r\n\t          },\r\n\t          {\r\n\t            label: 'This Year',\r\n\t            fillColor : 'rgba(151,187,205,0.5)',\r\n\t            strokeColor : 'rgba(151,187,205,1)',\r\n\t            data : data1\r\n\t          }\r\n\t        ]\r\n\t      };\r\n\r\n\t      new Chart(makeCanvas('chart-2-container')).Bar(data);\r\n\t      generateLegend('legend-2-container', data.datasets);\r\n\t    })\r\n\t    .catch(function(err) {\r\n\t      console.error(err.stack);\r\n\t    });\r\n\t  }\r\n\r\n\r\n\t  /**\r\n\t   * Draw the a chart.js doughnut chart with data from the specified view that\r\n\t   * show the top 5 browsers over the past seven days.\r\n\t   */\r\n\t  function renderTopBrowsersChart(ids) {\r\n\r\n\t    query({\r\n\t      'ids': ids,\r\n\t      'dimensions': 'ga:browser',\r\n\t      'metrics': 'ga:pageviews',\r\n\t      'sort': '-ga:pageviews',\r\n\t      'max-results': 5\r\n\t    })\r\n\t    .then(function(response) {\r\n\r\n\t      var data = [];\r\n\t      var colors = ['#4D5360','#949FB1','#D4CCC5','#E2EAE9','#F7464A'];\r\n\r\n\t      response.rows.forEach(function(row, i) {\r\n\t        data.push({ value: +row[1], color: colors[i], label: row[0] });\r\n\t      });\r\n\r\n\t      new Chart(makeCanvas('chart-3-container')).Doughnut(data);\r\n\t      generateLegend('legend-3-container', data);\r\n\t    });\r\n\t  }\r\n\r\n\r\n\t  /**\r\n\t   * Draw the a chart.js doughnut chart with data from the specified view that\r\n\t   * compares sessions from mobile, desktop, and tablet over the past seven\r\n\t   * days.\r\n\t   */\r\n\t  function renderTopCountriesChart(ids) {\r\n\t    query({\r\n\t      'ids': ids,\r\n\t      'dimensions': 'ga:country',\r\n\t      'metrics': 'ga:sessions',\r\n\t      'sort': '-ga:sessions',\r\n\t      'max-results': 5\r\n\t    })\r\n\t    .then(function(response) {\r\n\r\n\t      var data = [];\r\n\t      var colors = ['#4D5360','#949FB1','#D4CCC5','#E2EAE9','#F7464A'];\r\n\r\n\t      response.rows.forEach(function(row, i) {\r\n\t        data.push({\r\n\t          label: row[0],\r\n\t          value: +row[1],\r\n\t          color: colors[i]\r\n\t        });\r\n\t      });\r\n\r\n\t      new Chart(makeCanvas('chart-4-container')).Doughnut(data);\r\n\t      generateLegend('legend-4-container', data);\r\n\t    });\r\n\t  }\r\n\r\n\r\n\t  /**\r\n\t   * Extend the Embed APIs `gapi.analytics.report.Data` component to\r\n\t   * return a promise the is fulfilled with the value returned by the API.\r\n\t   * @param {Object} params The request parameters.\r\n\t   * @return {Promise} A promise.\r\n\t   */\r\n\t  function query(params) {\r\n\t    return new Promise(function(resolve, reject) {\r\n\t      var data = new gapi.analytics.report.Data({query: params});\r\n\t      data.once('success', function(response) { resolve(response); })\r\n\t          .once('error', function(response) { reject(response); })\r\n\t          .execute();\r\n\t    });\r\n\t  }\r\n\r\n\r\n\t  /**\r\n\t   * Create a new canvas inside the specified element. Set it to be the width\r\n\t   * and height of its container.\r\n\t   * @param {string} id The id attribute of the element to host the canvas.\r\n\t   * @return {RenderingContext} The 2D canvas context.\r\n\t   */\r\n\t  function makeCanvas(id) {\r\n\t    var container = document.getElementById(id);\r\n\t    var canvas = document.createElement('canvas');\r\n\t    var ctx = canvas.getContext('2d');\r\n\r\n\t    container.innerHTML = '';\r\n\t    canvas.width = container.offsetWidth;\r\n\t    canvas.height = container.offsetHeight;\r\n\t    container.appendChild(canvas);\r\n\r\n\t    return ctx;\r\n\t  }\r\n\r\n\r\n\t  /**\r\n\t   * Create a visual legend inside the specified element based off of a\r\n\t   * Chart.js dataset.\r\n\t   * @param {string} id The id attribute of the element to host the legend.\r\n\t   * @param {Array.<Object>} items A list of labels and colors for the legend.\r\n\t   */\r\n\t  function generateLegend(id, items) {\r\n\t    var legend = document.getElementById(id);\r\n\t    legend.innerHTML = items.map(function(item) {\r\n\t      var color = item.color || item.fillColor;\r\n\t      var label = item.label;\r\n\t      return '<li><i style=\"background:' + color + '\"></i>' + label + '</li>';\r\n\t    }).join('');\r\n\t  }\r\n\r\n\r\n\t  // Set some global Chart.js defaults.\r\n\t  Chart.defaults.global.animationSteps = 60;\r\n\t  Chart.defaults.global.animationEasing = 'easeInOutQuart';\r\n\t  Chart.defaults.global.responsive = true;\r\n\t  Chart.defaults.global.maintainAspectRatio = false;\r\n\r\n\t});\r\n});"],"sourceRoot":"/source/"}